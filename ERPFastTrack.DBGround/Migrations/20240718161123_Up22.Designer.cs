// <auto-generated />
using System;
using ERPFastTrack.DBGround.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERPFastTrack.DBGround.Migrations
{
    [DbContext(typeof(ERPFastTrackUIContext))]
    [Migration("20240718161123_Up22")]
    partial class Up22
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.DatabaseConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.ToTable("DatabaseConnections", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.DestinationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DestinationTypes", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SALESFORCE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CSV"
                        });
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Execution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FailedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Executions", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.ExecutionDetailedHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Created")
                        .HasColumnType("bit");

                    b.Property<int>("ExecutionDetailId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalIdValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonReq")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonRes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesforceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SchemaFailure")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionDetailId");

                    b.ToTable("ExecutionDetailedHistories", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.ExecutionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExecutionId")
                        .HasColumnType("int");

                    b.Property<int>("FailedRecords")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessedRecords")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TotalRecords")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionId");

                    b.HasIndex("JobId");

                    b.ToTable("ExecutionDetails", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.FileSourceConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArchiveLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.ToTable("FileSourceConnections", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.FileSourceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArchiveFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateFieldFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Delimiter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSourceDetailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FsConnId")
                        .HasColumnType("int");

                    b.Property<bool>("HasHeader")
                        .HasColumnType("bit");

                    b.Property<string>("TimeFieldFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FsConnId");

                    b.ToTable("FileSourceDetails", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FileSourceDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Mapping")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<int>("PId")
                        .HasColumnType("int");

                    b.Property<int?>("QueryId")
                        .HasColumnType("int");

                    b.Property<string>("SObjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileSourceDetailId");

                    b.HasIndex("OrgId");

                    b.HasIndex("PId");

                    b.HasIndex("QueryId");

                    b.ToTable("Jobs", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastValidation")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Licenses", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.OrgRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrgRoles", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "SUPERADMINISTRATOR"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "EDITOR"
                        },
                        new
                        {
                            Id = 4,
                            RoleName = "EXECUTOR"
                        });
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.OrgUsersRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("OrgUsersRelationships", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Organizations", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DbConnId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FsConnId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SfConnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DbConnId");

                    b.HasIndex("DestinationTypeId");

                    b.HasIndex("FsConnId");

                    b.HasIndex("OrgId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("SfConnId");

                    b.ToTable("Projects", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "DATABASE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "FILESOURCE"
                        });
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.QueryConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DbConnId")
                        .HasColumnType("int");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<string>("QueryDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DbConnId");

                    b.HasIndex("OrgId");

                    b.ToTable("QueryConfigurations", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.SalesforceConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenEndpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.ToTable("SalesforceConnections", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Scheduling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("DailyTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("HourlyMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MonthDay")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("MonthTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<int>("PId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("PId");

                    b.ToTable("Schedulings", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.SchedulingDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("SchedulingDetails", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Identity.UserData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.DatabaseConnection", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Organization", "Organization")
                        .WithMany("DatabaseConnections")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Execution", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Organization", "Organization")
                        .WithMany("Executions")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Scheduling", "Scheduling")
                        .WithMany("Executions")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Scheduling");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.ExecutionDetailedHistory", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.ExecutionDetails", "ExecutionDetail")
                        .WithMany("ExecutionDetailedHistories")
                        .HasForeignKey("ExecutionDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutionDetail");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.ExecutionDetails", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Execution", "Execution")
                        .WithMany("ExecutionDetails")
                        .HasForeignKey("ExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Job", "Job")
                        .WithMany("ExecutionDetails")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Execution");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.FileSourceConnection", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Organization", "Organization")
                        .WithMany("FileSourceConnections")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.FileSourceDetails", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.FileSourceConnection", "FileSourceConnection")
                        .WithMany("FileSourceDetails")
                        .HasForeignKey("FsConnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileSourceConnection");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Job", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.FileSourceDetails", "FileSourceDetails")
                        .WithMany("Jobs")
                        .HasForeignKey("FileSourceDetailId");

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Organization", "Organization")
                        .WithMany("Jobs")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Project", "Project")
                        .WithMany("Jobs")
                        .HasForeignKey("PId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.QueryConfiguration", "QueryConfiguration")
                        .WithMany("Jobs")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FileSourceDetails");

                    b.Navigation("Organization");

                    b.Navigation("Project");

                    b.Navigation("QueryConfiguration");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.OrgUsersRelationship", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Organization", "Organization")
                        .WithMany("OrgUsers")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.OrgRole", "Role")
                        .WithMany("OrgUsersRelationship")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Identity.UserData", "UserData")
                        .WithMany("Organizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Project", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.DatabaseConnection", "DatabaseConnection")
                        .WithMany("Projects")
                        .HasForeignKey("DbConnId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.DestinationType", "DestinationType")
                        .WithMany("Projects")
                        .HasForeignKey("DestinationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.FileSourceConnection", "FileSourceConnection")
                        .WithMany("Projects")
                        .HasForeignKey("FsConnId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Organization", "Organization")
                        .WithMany("Projects")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.SalesforceConnection", "SalesforceConnection")
                        .WithMany("Projects")
                        .HasForeignKey("SfConnId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DatabaseConnection");

                    b.Navigation("DestinationType");

                    b.Navigation("FileSourceConnection");

                    b.Navigation("Organization");

                    b.Navigation("ProjectType");

                    b.Navigation("SalesforceConnection");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.QueryConfiguration", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.DatabaseConnection", "DatabaseConnection")
                        .WithMany("QueryConfigurations")
                        .HasForeignKey("DbConnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Organization", "Organization")
                        .WithMany("QueryConfigurations")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatabaseConnection");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.SalesforceConnection", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Organization", "Organization")
                        .WithMany("SalesforceConfigurations")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Scheduling", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Organization", "Organization")
                        .WithMany("Schedulings")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Project", "Project")
                        .WithMany("Schedulings")
                        .HasForeignKey("PId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.SchedulingDetails", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Job", "Job")
                        .WithMany("SchedulingDetails")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Custom.Scheduling", "Scheduling")
                        .WithMany("SchedulingDetails")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Scheduling");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Identity.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Identity.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPFastTrack.DBGround.DBModels.Identity.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ERPFastTrack.DBGround.DBModels.Identity.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.DatabaseConnection", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("QueryConfigurations");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.DestinationType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Execution", b =>
                {
                    b.Navigation("ExecutionDetails");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.ExecutionDetails", b =>
                {
                    b.Navigation("ExecutionDetailedHistories");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.FileSourceConnection", b =>
                {
                    b.Navigation("FileSourceDetails");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.FileSourceDetails", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Job", b =>
                {
                    b.Navigation("ExecutionDetails");

                    b.Navigation("SchedulingDetails");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.OrgRole", b =>
                {
                    b.Navigation("OrgUsersRelationship");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Organization", b =>
                {
                    b.Navigation("DatabaseConnections");

                    b.Navigation("Executions");

                    b.Navigation("FileSourceConnections");

                    b.Navigation("Jobs");

                    b.Navigation("OrgUsers");

                    b.Navigation("Projects");

                    b.Navigation("QueryConfigurations");

                    b.Navigation("SalesforceConfigurations");

                    b.Navigation("Schedulings");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Project", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Schedulings");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.ProjectType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.QueryConfiguration", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.SalesforceConnection", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Custom.Scheduling", b =>
                {
                    b.Navigation("Executions");

                    b.Navigation("SchedulingDetails");
                });

            modelBuilder.Entity("ERPFastTrack.DBGround.DBModels.Identity.UserData", b =>
                {
                    b.Navigation("Organizations");
                });
#pragma warning restore 612, 618
        }
    }
}
